{"version":3,"sources":["webpack:///./examples/plugin.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AAGA,KAAM,OAAO;AACX,SAAM,MADK;AAEX,cAAW;AACT,qBAAgB,0BAAM,CAAE,CADf;AAET,qBAAgB,0BAAM,CAAE;AAFf,IAFA;AAMX,cAAW;AAAA;AAAA;AAAA;AAAA;AANA,EAAb;;AASA,KAAM,UAAU,CAAC,IAAD,CAAhB;AACA,KAAM,WAAW,CAAC,CAAC,MAAD,CAAD,CAAjB;;AAEA,UAAS,YAAT,CAAsB,WAAtB,EAAmC;AACjC,WAAQ,GAAR,CAAY,kBAAZ,EAAgC,2BAAQ,WAAR,CAAhC;AACD;;AAED,UAAS,OAAT,CAAiB,EAAjB,EAAqB;AACnB,WAAQ,GAAR,CAAY,YAAZ,EAA0B,GAAG,OAA7B,EAAsC,GAAG,OAAzC;AACA,OAAI,GAAG,OAAH,KAAe,EAAnB,EAAuB;AACrB,SAAI,GAAG,OAAP,EAAgB;AACd,cAAO,aAAP;AACD;AACD,YAAO,IAAP;AACD;AACD,UAAO,KAAP;AACD;;AAED,KAAM,gBAAgB,gBAAM,WAAN,CAAkB;AAAA;AACtC,kBADsC,6BACpB;AAChB,YAAO;AACL,gBAAS;AADJ,MAAP;AAGD,IALqC;AAMtC,oBANsC,+BAMlB;AAAA;;AAClB,SAAI,IAAI,CAAR;AACA,iBAAa,YAAM;AACjB;AACA,aAAK,QAAL,CAAc;AACZ,kBAAQ,CAAC;AACP,iBAAM,MADC;AAEP,sBAAW;AACT,6BAAgB,0BAAM,CAAE,CADf;AAET,6BAAgB,0BAAM,CAAE;AAFf,YAFJ;AAMP,sBAAW;AAAA;AAAA;AAAM;AAAN;AANJ,UAAD;AADI,QAAd;AAUD,MAZD,EAYG,IAZH;AAaD,IArBqC;AAsBtC,SAtBsC,oBAsB7B;AACP,aAAQ,GAAR,CAAY,WAAZ,EAAyB,KAAK,KAAL,CAAW,OAApC;AACA,YAAO;AACL,gBAAS,KAAK,KAAL,CAAW,OADf;AAEL,iBAAU,QAFL;AAGL,oBAAY,iBAHP;AAIL,kBAAW,mBAAC,EAAD;AAAA,gBAAQ,QAAQ,EAAR,CAAR;AAAA,QAJN;AAKL,iBAAU,kBAAC,WAAD;AAAA,gBAAiB,aAAa,WAAb,CAAjB;AAAA;AALL,OAAP;AAOD;AA/BqC,EAAlB,CAAtB;;AAkCA,oBAAS,MAAT,CAAgB,8BAAC,aAAD,OAAhB,EAAmC,SAAS,cAAT,CAAwB,iBAAxB,CAAnC,E","file":"plugin.js","sourcesContent":["// use jsx to render html, do not modify simple.html\n\nimport 'rc-editor-core/assets/index.less';\nimport { EditorCore, Toolbar, GetText } from 'rc-editor-core';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Entity } from 'draft-js';\nimport 'rc-editor-plugin-emoji/assets/index.css';\n\n\nconst Test = {\n  name: 'test',\n  callbacks: {\n    getEditorState: () => {},\n    setEditorState: () => {},\n  },\n  component: <div>123</div>\n};\n\nconst plugins = [Test];\nconst toolbars = [['test']];\n\nfunction editorChange(editorState) {\n  console.log('>> editorExport:', GetText(editorState));\n}\n\nfunction keyDown(ev) {\n  console.log('>> keydown', ev.keyCode, ev.ctrlKey);\n  if (ev.keyCode === 13) {\n    if (ev.ctrlKey) {\n      return 'split-block';\n    }\n    return true\n  }\n  return false;\n}\n\nconst EditorWrapper = React.createClass({\n  getInitialState() {\n    return {\n      plugins: [],\n    };\n  },\n  componentDidMount() {\n    let i = 0;\n    setInterval( () => {\n      i++;\n      this.setState({\n        plugins:[{\n          name: 'test',\n          callbacks: {\n            getEditorState: () => {},\n            setEditorState: () => {},\n          },\n          component: <div>{i}</div>\n        }]\n      });\n    }, 1000);\n  },\n  render() {\n    console.log('>> render', this.state.plugins);\n    return <EditorCore\n      plugins={this.state.plugins}\n      toolbars={toolbars}\n      placeholder=\"input text here\"\n      onKeyDown={(ev) => keyDown(ev)}\n      onChange={(editorState) => editorChange(editorState)}\n    />;\n  }\n});\n\nReactDOM.render(<EditorWrapper />, document.getElementById('__react-content'));\n\n\n\n/** WEBPACK FOOTER **\n ** ./examples/plugin.js\n **/"],"sourceRoot":""}